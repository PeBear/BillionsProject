/*
 * This file is generated by jOOQ.
 */
package vn.team.system.repository.model.tables;


import vn.team.system.repository.model.Indexes;
import vn.team.system.repository.model.Keys;
import vn.team.system.repository.model.Personel;
import vn.team.system.repository.model.tables.records.RecordRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Record extends TableImpl<RecordRecord> {

    private static final long serialVersionUID = -987148323;

    /**
     * The reference instance of <code>Personel.Record</code>
     */
    public static final Record RECORD = new Record();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordRecord> getRecordType() {
        return RecordRecord.class;
    }

    /**
     * The column <code>Personel.Record.Id</code>.
     */
    public final TableField<RecordRecord, Integer> ID = createField(DSL.name("Id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Personel.Record.Type</code>.
     */
    public final TableField<RecordRecord, Integer> TYPE = createField(DSL.name("Type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Personel.Record.Reason</code>.
     */
    public final TableField<RecordRecord, String> REASON = createField(DSL.name("Reason"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>Personel.Record.Date</code>.
     */
    public final TableField<RecordRecord, LocalDate> DATE = createField(DSL.name("Date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>Personel.Record.StaffId</code>.
     */
    public final TableField<RecordRecord, String> STAFFID = createField(DSL.name("StaffId"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>Personel.Record</code> table reference
     */
    public Record() {
        this(DSL.name("Record"), null);
    }

    /**
     * Create an aliased <code>Personel.Record</code> table reference
     */
    public Record(String alias) {
        this(DSL.name(alias), RECORD);
    }

    /**
     * Create an aliased <code>Personel.Record</code> table reference
     */
    public Record(Name alias) {
        this(alias, RECORD);
    }

    private Record(Name alias, Table<RecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private Record(Name alias, Table<RecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends org.jooq.Record> Record(Table<O> child, ForeignKey<O, RecordRecord> key) {
        super(child, key, RECORD);
    }

    @Override
    public Schema getSchema() {
        return Personel.PERSONEL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECORD_STAFFID);
    }

    @Override
    public Identity<RecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECORD;
    }

    @Override
    public UniqueKey<RecordRecord> getPrimaryKey() {
        return Keys.KEY_RECORD_PRIMARY;
    }

    @Override
    public List<UniqueKey<RecordRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordRecord>>asList(Keys.KEY_RECORD_PRIMARY);
    }

    @Override
    public List<ForeignKey<RecordRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RecordRecord, ?>>asList(Keys.RECORD_IBFK_1);
    }

    public Staff staff() {
        return new Staff(this, Keys.RECORD_IBFK_1);
    }

    @Override
    public Record as(String alias) {
        return new Record(DSL.name(alias), this);
    }

    @Override
    public Record as(Name alias) {
        return new Record(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(String name) {
        return new Record(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(Name name) {
        return new Record(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, LocalDate, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
