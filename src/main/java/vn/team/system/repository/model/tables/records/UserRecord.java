/*
 * This file is generated by jOOQ.
 */
package vn.team.system.repository.model.tables.records;


import vn.team.system.repository.model.tables.User;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1914421355;

    /**
     * Setter for <code>Personel.User.Username</code>.
     */
    public void setUsername(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>Personel.User.Username</code>.
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>Personel.User.Password</code>.
     */
    public void setPassword(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Personel.User.Password</code>.
     */
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Personel.User.Fullname</code>.
     */
    public void setFullname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Personel.User.Fullname</code>.
     */
    public String getFullname() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return User.USER.USERNAME;
    }

    @Override
    public Field<String> field2() {
        return User.USER.PASSWORD;
    }

    @Override
    public Field<String> field3() {
        return User.USER.FULLNAME;
    }

    @Override
    public String component1() {
        return getUsername();
    }

    @Override
    public String component2() {
        return getPassword();
    }

    @Override
    public String component3() {
        return getFullname();
    }

    @Override
    public String value1() {
        return getUsername();
    }

    @Override
    public String value2() {
        return getPassword();
    }

    @Override
    public String value3() {
        return getFullname();
    }

    @Override
    public UserRecord value1(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UserRecord value3(String value) {
        setFullname(value);
        return this;
    }

    @Override
    public UserRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(String username, String password, String fullname) {
        super(User.USER);

        set(0, username);
        set(1, password);
        set(2, fullname);
    }
}
