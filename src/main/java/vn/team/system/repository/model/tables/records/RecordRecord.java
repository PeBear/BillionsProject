/*
 * This file is generated by jOOQ.
 */
package vn.team.system.repository.model.tables.records;


import vn.team.system.repository.model.tables.Record;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordRecord extends UpdatableRecordImpl<RecordRecord> implements Record5<Integer, Integer, String, LocalDate, String> {

    private static final long serialVersionUID = -734031526;

    /**
     * Setter for <code>Personel.Record.Id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Personel.Record.Id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Personel.Record.Type</code>.
     */
    public void setType(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>Personel.Record.Type</code>.
     */
    public Integer getType() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>Personel.Record.Reason</code>.
     */
    public void setReason(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Personel.Record.Reason</code>.
     */
    public String getReason() {
        return (String) get(2);
    }

    /**
     * Setter for <code>Personel.Record.Date</code>.
     */
    public void setDate(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>Personel.Record.Date</code>.
     */
    public LocalDate getDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>Personel.Record.StaffId</code>.
     */
    public void setStaffid(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>Personel.Record.StaffId</code>.
     */
    public String getStaffid() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, LocalDate, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Integer, String, LocalDate, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Record.RECORD.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Record.RECORD.TYPE;
    }

    @Override
    public Field<String> field3() {
        return Record.RECORD.REASON;
    }

    @Override
    public Field<LocalDate> field4() {
        return Record.RECORD.DATE;
    }

    @Override
    public Field<String> field5() {
        return Record.RECORD.STAFFID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getType();
    }

    @Override
    public String component3() {
        return getReason();
    }

    @Override
    public LocalDate component4() {
        return getDate();
    }

    @Override
    public String component5() {
        return getStaffid();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getType();
    }

    @Override
    public String value3() {
        return getReason();
    }

    @Override
    public LocalDate value4() {
        return getDate();
    }

    @Override
    public String value5() {
        return getStaffid();
    }

    @Override
    public RecordRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RecordRecord value2(Integer value) {
        setType(value);
        return this;
    }

    @Override
    public RecordRecord value3(String value) {
        setReason(value);
        return this;
    }

    @Override
    public RecordRecord value4(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public RecordRecord value5(String value) {
        setStaffid(value);
        return this;
    }

    @Override
    public RecordRecord values(Integer value1, Integer value2, String value3, LocalDate value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RecordRecord
     */
    public RecordRecord() {
        super(Record.RECORD);
    }

    /**
     * Create a detached, initialised RecordRecord
     */
    public RecordRecord(Integer id, Integer type, String reason, LocalDate date, String staffid) {
        super(Record.RECORD);

        set(0, id);
        set(1, type);
        set(2, reason);
        set(3, date);
        set(4, staffid);
    }
}
